-*- buffer-read-only: t -*-

#+TAGS: KEYBINDINGS ORG BUG_FIX EVIL_MODE SO_Solution TOC

* TOC                                                                   :TOC:
- [[#add-the-system-clipboard-to-emacs-kill-ring][Add the System Clipboard to emacs kill-ring]]
- [[#my-keybindings][My keybindings]]
  - [[#shortcuts-for-insert-pair-and-delete-pair][Shortcuts for insert-pair and delete-pair]]
  - [[#go-to-the-next-checkbox-or-list-item][Go to the next checkbox or list item]]
  - [[#org-mode-enable-search-in-current-buffer-using-sparse-tree-search][Org mode enable search in current buffer using sparse tree search]]
  - [[#org-mode-fix-kill-region-call][Org mode fix kill-region call]]
  - [[#making-ctrl-b-to-delete-character-backwards][Making Ctrl-b to delete character backwards]]
  - [[#making-ace-window-f12-function-keybinding][Making ace-window <f12> function keybinding]]
  - [[#making-f11-full-screen-toggled-into-expand-regionel][Making F11 full screen toggled into expand-region.el]]
  - [[#making-f10-xah-extend-selection][Making F10 xah extend selection]]
  - [[#making-helm-local-mark-ring][Making Helm Local Mark Ring]]
  - [[#making-helm-kill-ring][Making Helm Kill Ring]]
  - [[#making-helm-global-mark-ring][Making Helm Global Mark Ring]]
  - [[#making-helm-global-mark-ring-1][Making Helm Global Mark Ring]]
  - [[#insert-into-the-mark-ring][Insert into the mark ring]]
  - [[#highlight-line-mode][Highlight line mode]]
  - [[#enable-and-disable-abbrev-mode][Enable and disable abbrev-mode]]
  - [[#yas-insert-snippet][Yas insert snippet]]
  - [[#enable-yas-minor-mode][Enable yas-minor-mode]]
  - [[#enable-org-column-mode][+Enable org-column-mode+]]
  - [[#ctrl-g-keyboard-quit][Ctrl-g Keyboard-Quit]]
  - [[#toggle-headline][Toggle headline]]
  - [[#move-to-next-frame][Move to next Frame]]
  - [[#move-to-other-window-in-same-frame][move to other window in same frame]]
  - [[#change-c-backspace-to-use-undo-tree][Change C-Backspace to use undo tree]]
- [[#evil-mode][Evil-Mode]]
  - [[#setting-auto-increment][Setting auto-increment]]
  - [[#keybindings-to-replicate-gk-and-gj-in-vim-on-evil][Keybindings to replicate gk and gj in VIM on Evil]]
  - [[#toggle-todo-states-in-normal-mode-with-the-t-key][Toggle TODO states in normal mode with the "t" key]]
  - [[#python-mode-quirks-in-evil-mode][+Python mode quirks in evil mode+]]
  - [[#keybinding-for-recording-evil-delete-word-backwards][Keybinding for recording evil-delete-word-backwards]]
- [[#dired-configuration][Dired configuration]]
  - [[#get-dired-to-print-human-readable-sized-files][Get dired to print human readable sized files.]]
  - [[#making-dired-use-the-same-buffer-for-viewing-directory][Making dired use the same buffer for viewing directory]]
  - [[#quickly-copymove-files-in-emacs-dired-set-dired-dwim-target][Quickly copy/move files in emacs dired: Set dired-dwim-target]]
- [[#auto-complete][Auto complete]]
  - [[#auto-complete-prompts-using-company-mode][Auto complete prompts using company mode]]
  - [[#removing-annoying-decorator-on-company-prompt][Removing annoying decorator on company prompt]]
  - [[#binding-keybinding-shift-spc-for-company-prompt][Binding keybinding SHIFT-SPC for company prompt]]
- [[#org-stuff][Org stuff]]
  - [[#org-tangle-confirmation-disable][Org tangle confirmation disable]]
  - [[#init-org-mode-auto-load-todo-paths-and-define-standard-bindings][Init Org mode, auto load todo paths, and define standard bindings]]
  - [[#org-configs-based-on-john-wigley][Org configs based on john wigley]]
  - [[#org-bullets-stuff][Org bullets stuff]]
  - [[#org-agenda-list-from-aaron-bieber][Org agenda list from aaron bieber]]
  - [[#for-tag-searches-ignore-tasks-with-scheduled-and-deadline-dates][For tag searches ignore tasks with scheduled and deadline dates]]
  - [[#org-mode-enable-habits][Org mode enable habits]]
  - [[#org-refile-from-aaron-url][Org refile from Aaron URL]]
  - [[#automatic-org-mode-time-clock][+Automatic Org mode time clock+]]
  - [[#shortcut-to-move-to-your-parent-heading-and-narrow-buffer-to-that-heading][Shortcut to move to your parent heading and narrow buffer to that heading]]
  - [[#org-clocking-shortcuts][ORG Clocking shortcuts]]
  - [[#refile-org-configurations-with-reverse-notes][Refile org configurations with reverse notes]]
  - [[#refile-configurations-from-aaron-bieber][Refile configurations from aaron bieber]]
  - [[#toggle-function-to-display-links-or-hide-links][Toggle function to display links or hide links]]
  - [[#toggle-function-to-display-emphasis-markers-in-org-file-or-hide-emphasis-markers][Toggle function to display emphasis markers in org file or hide emphasis markers]]
  - [[#shutdown-hooks][Shutdown hooks]]
  - [[#org-clock-remove-clocked-tasks-with-000-duration][Org clock remove clocked tasks with 0:00 duration]]
  - [[#hide-emphasis-markers-in-emacs-makes-org-files-look-clean][Hide emphasis markers in emacs makes org files look clean]]
  - [[#repeat-last-command-set-to-spc-][Repeat last command set to SPC-.]]
  - [[#disable-enlarged-org-mode-header-appearance][Disable enlarged org-mode header appearance]]
  - [[#changing-the-org-mode-ellipsis-to-a-more-indicative-symbol][Changing the org-mode ellipsis to a more indicative symbol]]
  - [[#org-roam-update-the-files-last_updated-tag-when-saving-the-file][Org-Roam update the files last_updated tag when saving the file]]
  - [[#org-narrow-backwards-and-forwards][Org narrow backwards and forwards]]
- [[#writeroom-configurations][Writeroom configurations]]
  - [[#toggle-line-numbers-in-writeroom-mode][Toggle line numbers in writeroom mode.]]
- [[#magit][Magit]]
- [[#ivy-mode][IVY Mode]]
- [[#cursor-marks][Cursor marks]]
- [[#ibuffers-configs][ibuffers configs]]
  - [[#use-ibuffer-for-buffer-list][Use Ibuffer for Buffer List]]
  - [[#other-useful-options][Other useful options]]
    - [[#ibuffer-expert][ibuffer-expert]]
    - [[#ibuffer-show-empty-filter-groups][ibuffer-show-empty-filter-groups]]
    - [[#ibuffer-auto-mode][ibuffer-auto-mode]]
- [[#buffers-indirection][Buffers indirection]]
  - [[#sub-tree-indirect-to-buffer][Sub-tree indirect to buffer]]
  - [[#toggle-revert-buffer-without-or-with-confirmation][Toggle Revert Buffer without or with confirmation]]
- [[#keywords][keywords]]
  - [[#fast-todo-selection][Fast Todo Selection]]
- [[#my-shortcut-keys][My shortcut keys]]
  - [[#move-to-next-method-and-previous-method][Move to next method and previous method]]
  - [[#forcing-org-mode-to-open-a-link-in-another-frame-not-window][Forcing org-mode to open a link in another frame not window]]
- [[#xah-functions-being-used][Xah functions being used]]
  - [[#select-text-between-quotesbraces][Select text between Quotes/Braces]]
  - [[#xah-extend-selection][Xah Extend Selection]]
  - [[#xah-move-between-cursor-to-bracketquote][Xah Move between cursor to Bracket/Quote]]
- [[#java-setup][Java Setup]]
  - [[#log4j-setup-notes][+Log4j setup Notes+]]
  - [[#java-indentation][Java indentation]]
  - [[#eclim-installation][eclim installation]]
- [[#dgg-functions][Dgg functions]]
  - [[#my-functions-for-shortcuts][My functions for shortcuts]]
  - [[#insert-around-region][Insert around region]]
  - [[#unicode-chars][Unicode chars]]
  - [[#using-rainer-konigs-blog-about-keeping-three-most-important-things][Using Rainer Konig's blog about keeping three most important things]]
  - [[#function-to-convert-a-word-into-its-ing-form][Function to convert a word into it's "ing" form]]
  - [[#xah-fly-keys-insert-quotes-around-region][Xah fly keys insert quotes around region]]
- [[#clipboard-managment-using-ivy][Clipboard managment using ivy]]
  - [[#counsel-yank-pop-with-a-tweak][+Counsel-Yank-Pop With a Tweak+]]
  - [[#add-the-system-clipboard-to-the-emacs-kill-ring][Add the System Clipboard to the emacs-kill-ring]]
  - [[#enable-storing-everything-into-clipboard-not-just-within-emacs][Enable storing everything into clipboard not just within emacs.]]
- [[#setup-emacs-as-a-sql-database-client][Setup Emacs as a SQL database client]]
  - [[#adding-sql-mode][Adding SQL mode]]
  - [[#sql-mode][SQL mode]]
- [[#camelcaseing-and-lower-caseing-in-emacs][CamelCaseing and Lower caseing in emacs]]
- [[#spacemacs-configs][Spacemacs configs]]
  - [[#turn-on-auto-fill-mode][+Turn on auto fill mode.+]]
  - [[#turn-off-auto-fill-mode][Turn off auto fill mode.]]
  - [[#enable-visual-line-mode][Enable visual-line-mode]]
  - [[#global-visual-line-mode][Global visual line mode]]
  - [[#dgg-helper-functions][DGG helper functions]]
  - [[#update-path-variables][+Update PATH variables+]]
  - [[#making-ielm-usage-bare-able-with-autopair-or-paraedit][Making IELM usage bare-able with autopair or paraedit]]
  - [[#remove-the-advice-to-enable-scroll-bar-for-a-few-seconds-when-using-mouse-scrolling][Remove the advice to enable scroll-bar for a few seconds when using mouse scrolling]]
  - [[#mouse-click-issue][Mouse click issue]]
- [[#enhancing-the-speed-of-spacemacs-owing-to-flyspell-performance-issues][Enhancing the speed of spacemacs owing to flyspell performance issues]]
- [[#xah-parenthesis][Xah parenthesis]]
  - [[#xah-emacs-commands][Xah Emacs Commands]]
  - [[#problems-of-electric-pair-mode][Problems of electric-pair-mode]]

* Add the System Clipboard to emacs kill-ring
- URL: http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/

- Gist:
  By default, if you copy something to the system clipboard (e.g. some text in firefox) and then copy or kill some text in Emacs, then the text from firefox is lost. If you set the option below in your emacs config file then copying or killing text in Emacs will add the system clipboard text to the kill-ring so that you can find it when you cycle through your clipboard history in Emacs.

- Code
  #+BEGIN_SRC emacs-lisp :results silent

    (setq save-interprogram-paste-before-kill t)
    (message "After: Add the System Clipboard to emacs kill-ring")

  #+END_SRC


* My keybindings                                                :KEYBINDINGS:

** Shortcuts for insert-pair and delete-pair
#+BEGIN_SRC emacs-lisp :results silent

  (define-key global-map [?\s-r] 'revert-buffer)
  ;; My keybindings
  ;; for inserting quotations, parenthesis, and square brackets
  (global-set-key (kbd "M-\[") 'insert-pair)
  (global-set-key (kbd "M-\"") 'insert-pair)
  (global-set-key (kbd "M-\'") 'insert-pair)
  (global-set-key (kbd "C-M-)") 'delete-pair)
  ;; END: My keybindings
  (message "After: Shortcuts for insert-pair and delete-pair")

#+END_SRC

** Go to the next checkbox or list item
#+BEGIN_SRC emacs-lisp :results silent


  (spacemacs/set-leader-keys-for-major-mode 'org-mode (kbd "m") 'org-next-item)

  (spacemacs/set-leader-keys-for-major-mode 'org-mode (kbd "j") 'org-previous-item)

  (message "After: Go to the next checkbox or list item")
#+END_SRC

** Org mode enable search in current buffer using sparse tree search
#+BEGIN_SRC emacs-lisp :results silent

  (spacemacs/set-leader-keys-for-major-mode 'org-mode (kbd "q") 'org-tags-sparse-tree)

#+END_SRC

** Org mode fix kill-region call
#+begin_src emacs-lisp :results silent
  ;; This is a bug fix for org mode map delete region.
  (define-key org-mode-map (kbd "<S-backspace>") 'kill-region)
  (message "After: Org mode fix kill-region call")
#+end_src




** Making Ctrl-b to delete character backwards
I really do not see a need for ctrl b to be bound to back char.
#+BEGIN_SRC emacs-lisp :results silent


  (global-set-key (kbd "C-b") 'backward-delete-char-untabify)

#+END_SRC


** Making ace-window <f12> function keybinding
#+BEGIN_SRC emacs-lisp :results silent

(global-set-key (kbd "<f12>") 'ace-window)

#+END_SRC

** Making F11 full screen toggled into expand-region.el
#+BEGIN_SRC emacs-lisp :results silent

  (global-set-key (kbd "<f9>") 'er/expand-region)

#+END_SRC

** Making F10 xah extend selection
#+BEGIN_SRC emacs-lisp :results silent

  (global-set-key (kbd "<f10>") 'xah-extend-selection)

#+END_SRC

** Making Helm Local Mark Ring
#+BEGIN_SRC emacs-lisp :results silent
  ;; (global-set-key (kbd "M-0") 'nil)

  (global-set-key (kbd "<kp-2>") 'helm-mark-ring)

#+END_SRC

** Making Helm Kill Ring
#+BEGIN_SRC emacs-lisp :results silent

  (global-set-key (kbd "<kp-1>") 'helm-show-kill-ring)

#+END_SRC

** Making Helm Global Mark Ring
#+BEGIN_SRC emacs-lisp :results silent

  (global-set-key (kbd "<kp-4>") 'helm-global-mark-ring)

#+END_SRC

** Making Helm Global Mark Ring
#+BEGIN_SRC emacs-lisp :results silent

  (global-set-key (kbd "<kp-5>") 'follow-mode)

#+END_SRC

** Insert into the mark ring
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "<kp-6>") 'set-mark-command)
#+END_SRC

** Highlight line mode                                          :deprecated:

#+BEGIN_SRC emacs-lisp :results silent
  ;; (global-set-key (kbd "<kp-7>") 'hl-line-mode)
#+END_SRC


** Enable and disable abbrev-mode
  #+begin_src emacs-lisp :results silent
  (global-set-key (kbd "<kp-7>") 'abbrev-mode)
  #+end_src

** Yas insert snippet
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "<kp-8>") 'yas-insert-snippet)
#+END_SRC


** Enable yas-minor-mode
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "<kp-3>") 'yas-minor-mode)
#+END_SRC


** +Enable org-column-mode+
#+BEGIN_SRC emacs-lisp :results silent
  ;; (global-set-key (kbd "<kp-9>") 'org-columns)
#+END_SRC


** Ctrl-g Keyboard-Quit
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "<kp-0>") 'keyboard-quit)
#+END_SRC

** Toggle headline
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "<f2>") 'spacemacs/toggle-mode-line)
#+END_SRC



** Move to next Frame
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "<kp-9>") 'other-frame)
#+END_SRC

** move to other window in same frame
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "<insert>") 'other-window)
#+END_SRC

** Change C-Backspace to use undo tree
#+BEGIN_SRC emacs-lisp :results silent

(global-unset-key (kbd "<C-backspace>"))
(global-set-key (kbd "<C-backspace>") 'undo-tree-undo)

#+END_SRC


* Evil-Mode                                                       :EVIL_MODE:
** Setting auto-increment
:PROPERTIES:
:ID:       78cd2a12-c3cc-49b5-a0cd-16995bda665f
:END:
- URL :: [[Https://github.com/syl20bnr/spacemacs/issues/9914][URL-used-to-resolve-issue]]

#+BEGIN_SRC emacs-lisp :results silent
;; (require 'evil-numbers)
1
(evil-define-key 'normal global-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(evil-define-key 'normal global-map (kbd "C-s") 'evil-numbers/dec-at-pt)
;; (evil-define-key 'normal global-map (kbd "C-x") 'evil-numbers/dec-at-pt)
(message "After: Setting auto-increment")
#+END_SRC
** Keybindings to replicate gk and gj in VIM on Evil           :KEYBINDINGS:
#+BEGIN_SRC emacs-lisp :results silent
  ;; (with-eval-after-load 'evil-maps
  ;;   (spacemacs/set-leader-keys-for-major-mode 'evil-mode (kbd "oj") 'evil-next-line)
  ;;   (spacemacs/set-leader-keys-for-major-mode 'evil-mode (kbd "ok") 'evil-previous-line))

  (spacemacs/set-leader-keys-for-minor-mode 'evil-mode (kbd "oj") 'evil-next-line)
  (spacemacs/set-leader-keys-for-minor-mode 'evil-mode (kbd "oj") 'evil-next-line)

  (spacemacs/set-leader-keys-for-major-mode 'evil-mode (kbd "oj") 'evil-next-line)
  (spacemacs/set-leader-keys-for-major-mode 'evil-mode (kbd "ok") 'evil-previous-line)

  (spacemacs/set-leader-keys "oj" 'evil-next-line)
  (spacemacs/set-leader-keys "ok" 'evil-previous-line)

  (message "After: Keybindings to replicate gk and gj in VIM on Evil")
#+END_SRC
** Toggle TODO states in normal mode with the "t" key          :KEYBINDINGS:
#+BEGIN_SRC emacs-lisp :tangle no :results silent

  ;; Toggle TODO states in normal mode with the "Tt" key
  ;; (evil-define-key 'normal org-mode-map "Tt" 'org-todo)
;; (message "After: Toggle TODO states in normal mode with the "t" key")

#+END_SRC
** +Python mode quirks in evil mode+                     :KEYBINDINGS:BUG_FIX:
#+BEGIN_SRC emacs-lisp :tangle no :results silent

  ;; (setq evilmi-always-simple-jump t) is an option for advanced users. Jump algorithm using python indentation is still usable but with lower priority when this flag is on.
  ;; https://github.com/redguardtoo/evil-matchit/issues/75
  ;; (setq evilmi-always-simple-jump t)
  ;; (setq revert-without-query '(".*"))
  ;; (global-auto-revert-mode)

#+END_SRC
** Keybinding for recording evil-delete-word-backwards
#+BEGIN_SRC emacs-lisp :results silent

    ;; (evil-define-key 'insert global-map (kbd "C-w") 'evil-delete-backward-word)


    ;; (define-key evil-insert-state-map (kbd "C-w") 'evil-delete-backward-word)

  (global-set-key (kbd "C-w") 'evil-delete-backward-word)
  ;; (define-key evil-insert-state-map (kbd "C-w") 'evil-delete-backward-word)
  ;; (evil-define-key 'insert global-map (kbd "C-w") 'evil-delete-backward-word)
  (message "After: Keybinding for recording evil-delete-word-backward")

#+END_SRC


* Dired configuration
** Get dired to print human readable sized files.
#+BEGIN_SRC emacs-lisp :results silent

  (setq dired-listing-switches "-alh")
  (message "After: Get dired to print human readable sized files.")

#+END_SRC

** Making dired use the same buffer for viewing directory
#+BEGIN_SRC emacs-lisp :results silent

  (require 'dired )

  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file

  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-director

  (message "After: Making dired use the same buffer for viewing directory")
#+END_SRC


** Quickly copy/move files in emacs dired: Set dired-dwim-target
URL: https://emacs.stackexchange.com/questions/5603/how-to-quickly-copy-move-file-in-emacs-dired
#+BEGIN_SRC emacs-lisp :results silent

  (setq dired-dwim-target t)

  (message "After: Quickly copy/move files in emacs dired: Set dired-dwim-target")

#+END_SRC

* Auto complete
** Auto complete prompts using company mode
URL: https://github.com/syl20bnr/spacemacs/issues/4284
#+BEGIN_SRC emacs-lisp :results silent

  (add-hook 'company-mode-hook
            (lambda()
              (global-set-key (kbd "S-SPC") 'company-complete)))
(message "After: Auto complete prompts using company mode")
#+END_SRC
** Removing annoying decorator on company prompt
URL: https://www.reddit.com/r/emacs/comments/n41prc/what_is_this_abc_prefix_in_company_mode_that_i/
#+BEGIN_SRC emacs-lisp :results silent

;; Config auto complete
;; not necessary because of spacemacs config layer
;; (setq company-idle-delay 0.1)

;; remove the annoying abc characters in complete-at-point
;; company-complete
;;
(setq company-format-margin-function nil)
(message "After: Removing annoying decorator on company prompt")

#+END_SRC
** Binding keybinding SHIFT-SPC for company prompt
#+BEGIN_SRC emacs-lisp :results silent

  (add-hook 'company-mode-hook
            (lambda()
              (global-set-key (kbd "S-SPC") 'company-complete)))
(message "After: Binding keybinding SHIFT-SPC for company prompt")
#+END_SRC


* Org stuff                                                             :ORG:
** Org tangle confirmation disable
Stop asking for code evaluation confirmation every single time
url: [[https://emacs.stackexchange.com/questions/2945/org-babel-eval-with-no-confirmation-is-explicit-eval-yes][yes stop asking every time]]
#+BEGIN_SRC emacs-lisp :results silent
  (defun dgg/org-confirm-babel-evaluate (lang body)
    (not (or
          (string= lang "java")
          (string= lang "python")
          (string= lang "C")
          (string= lang "c++")
          (string= lang "plantuml")
          ;; (string= lang "elisp")
          ;; (string= lang "shell")
          (string= lang "cpp"))))
  (setq org-confirm-babel-evaluate 'dgg/org-confirm-babel-evaluate)
  (message "After: Org tangle confirmation disable")
#+END_SRC

** Init Org mode, auto load todo paths, and define standard bindings
#+BEGIN_SRC emacs-lisp :results silent
;;;
;;;  Org Mode
;;;
(add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org)
(message "after: init org mode, auto load todo paths, and define standard bindings")
;;(setq org-directory "~/dropbox/org ~/workdir/inter/interview")
;;(setq org-default-notes-file "~/dropbox/org/refile.org")

;;
;; Standard key bindings
;; (global-set-key "\C-cb" 'org-iswitchb)

#+END_SRC

** Org configs based on john wigley

- Blog: [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][notes-john-wigley]]

#+BEGIN_SRC emacs-lisp :results silent

  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
  (message "After:Org configs based on john wigley")

#+END_SRC

** Org bullets stuff
#+BEGIN_SRC emacs-lisp :results silent
  ;; https://orgmode.org/manual/Handling-links.html
  (global-set-key (kbd "C-c l") 'org-store-link)
  ;; (global-set-key "\C-cl" 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  ;; (global-set-key "\C-ca" 'org-agenda)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)
  ;;(add-hook 'org-load-hook
  ;;  (lambda ()
  ;;    (define-key org-mode-map "\M-n" 'org-next-link)
  ;;    (define-key org-mode-map "\M-p" 'org-previous-link)))

  ;; setting fontify for better java
  ;; further explanantion here:
  ;; https://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html
  ;; (setq org-src-fontify-natively t)
  (message "After: Org bullets stuff")
#+END_SRC

** Org agenda list from aaron bieber
Using the agenda: [https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html]

- Good ::
    #+BEGIN_SRC emacs-lisp :results silent

    (defun dgg-pop-to-org-agenda (split)
      "Visit the org agenda, in the current window or a SPLIT."
      (interactive "P")
      (org-agenda-list)
      (when (not split)
          (delete-other-windows)))

    ;; (define-key global-map (kbd "C-<f12>") 'dgg-pop-to-org-agenda)
    (global-set-key (kbd "C-<f12>") 'dgg-pop-to-org-agenda)
    (message "After: Org agenda list from aaron bieber")
    #+END_SRC


    The "dgg" part is just a namespace prefix that I use for all of my custom functions for historical reasons I won't go into; the important part is the ~split~ argument, which allows me to optionally allow the window to split as it does normally by specifying a prefix.


** For tag searches ignore tasks with scheduled and deadline dates
#+BEGIN_SRC emacs-lisp :results silent
  (setq org-agenda-tags-todo-honor-ignore-options t)
  (message "After: For tag searches ignore tasks with scheduled and deadline dates")
#+END_SRC

** Org mode enable habits
[[http://lists.gnu.org/archive/html/emacs-orgmode//2010-04/msg00122.html][enable org habits]]

#+BEGIN_SRC emacs-lisp :results silent
  ;; Adding org-habit to the end of the list
  (add-to-list 'org-modules 'org-habit t)

  (setq org-habit-graph-column 80)
  (setq org-habit-show-habits-only-for-today nil)
  (message "After: Org mode enable habits")
#+END_SRC

** Org refile from Aaron URL
[[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][refile-notes-aaron-blog]]

- Refile targets with lower level
  #+BEGIN_SRC emacs-lisp :results silent
    (setq org-refile-targets '((nil :maxlevel . 10)
                               (org-agenda-files :maxlevel . 5)))
    (message "After: Refile targets with lower level")
  #+END_SRC

- Refile to the Top Level
  #+BEGIN_SRC emacs-lisp :results silent
  (setq org-refile-use-outline-path 'file)
  (message "After: Refile to the Top Level")
  #+END_SRC
- Creating new parents
  #+BEGIN_SRC emacs-lisp :results silent
  (setq org-outline-path-complete-in-steps nil)
  (message "After: Creating new parents")
  #+END_SRC
- Creating New Parents
  #+BEGIN_SRC emacs-lisp :results silent
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (message "After: Creating New Parents")
  #+END_SRC

** +Automatic Org mode time clock+
URLs used for this feature:
- [[https://lists.gnu.org/archive/html/emacs-orgmode/2009-04/msg00315.html][discussion]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][what's advicing function do?]]
-[[https://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/#disqus_thread][ sacha's notes for the same feature]]
#+BEGIN_SRC emacs-lisp :results silent
    ;; (setq org-clock-in-switch-to-state "IN_PROGRESS")

    ;; https://lists.gnu.org/archive/html/emacs-orgmode/2009-04/msg00315.html
    ;; org-mode automatic clocking on TODO
    ;; ------------------------------------------------------------------
    ;; (defun sacha/org-clock-in-if-starting ()
    ;;   "Clock in when the task is marked IN_PROGRESS."
    ;;   (when (and (string= org-state "IN_PROGRESS")
    ;;              (not (string= org-last-state org-state)))
    ;;     (org-clock-in)))

    ;; (defadvice org-clock-in (after sacha activate)
    ;;   "Set this task's status to 'IN_PROGRESS'."
    ;;   (org-todo "IN_PROGRESS"))

    ;; (defadvice org-clock-out (after sacha activate)
    ;;   "When clocking out set this task's status to 'WAITING'.
    ;; When you want to close a task simply state change to 'DONE'"
    ;;   (when (not (string= org-state "DONE")) (org-todo "WAITING")))

    ;; (defun sacha/org-clock-out-if-waiting ()
    ;;   "Clock out when the task is marked WAITING."
    ;;   (when (and (string= org-state "WAITING")
    ;;              (not (string= org-last-state org-state)))
    ;;     (org-clock-out)))
    ;;    (when (and (string= state "WAITING")
    ;;               (equal (marker-buffer org-clock-marker) (current-buffer))
    ;;               (< (point) org-clock-marker)
    ;;               (> (save-excursion (outline-next-heading) (point))
    ;;	                 org-clock-marker)
    ;;	            (not (string= last-state state)))

    ;; (add-hook 'org-clock-out-hook 'sacha/org-clock-out-if-waiting)
    ;; (add-hook 'org-after-todo-state-change-hook 'sacha/org-clock-in-if-starting)
    ;; (add-hook 'org-after-todo-state-change-hook 'sacha/org-clock-out-if-waiting)

    ;; start the clock if there is a IN_PROGRESS todo tag in template
    ;--------------------------------------------------------------------
    ;; (add-hook 'org-clock-in-hook 'my-start-clock-if-needed)
    ;; (add-hook 'org-clock-in-hook 'sacha/org-clock-in-if-starting)
    ;; (add-hook 'org-remember-before-finalize-hook 'my-start-clock-if-needed)

  ;; (defun my-start-clock-if-needed ()
  ;;     (save-excursion
  ;;       (goto-char (point-min))
  ;;       (when (re-search-forward "*+ IN_PROGRESS" nil t)
  ;;         (change-todo-state-on-old-clock)
  ;;         (org-clock-in))))

    ; change the state of the old clock
    ;---------------------------------------------------------------------------
  ;;   (defun change-todo-state-on-old-clock ()
  ;;     "Change the state of the old clock.
  ;; Function old-clock needs state changed if WAITING."
  ;;     (save-excursion
  ;;       (progn
  ;;         (when (marker-buffer org-clock-marker)
  ;;           (set-buffer (marker-buffer org-clock-marker))
  ;;           (goto-char (point-min))
  ;;           (when  (re-search-forward "^\*+ IN_PROGRESS" nil t)
  ;;             (org-todo "WAITING"))))))


#+END_SRC

** Shortcut to move to your parent heading and narrow buffer to that heading :KEYBINDINGS:
#+BEGIN_SRC emacs-lisp :results silent

  (spacemacs/set-leader-keys-for-major-mode 'org-mode "sp" 'mb/org-narrow-to-parent)
  (message "After: Shortcut to move to your parent heading and narrow buffer to that heading")

#+END_SRC

** ORG Clocking shortcuts                                      :KEYBINDINGS:
#+BEGIN_SRC emacs-lisp :results silent

  (spacemacs/set-leader-keys-for-major-mode 'org-mode "I" 'org-clock-in)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "O" 'org-clock-out)
  (message "After: ORG Clocking shortcuts")

#+END_SRC


** Refile org configurations with reverse notes
#+BEGIN_SRC emacs-lisp :results silent

  ;; Refile notes to top
  (setq org-reverse-note-order t)
  (message "After: Refile org configurations with reverse notes")
#+END_SRC

** Refile configurations from aaron bieber
#+BEGIN_SRC emacs-lisp :results silent

  ;; Refile URL
  ;; configurations: https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
  ;; adding current file into refile target: https://www.reddit.com/r/orgmode/comments/g5006o/can_you_add_the_current_file_to_orgrefiletargets/
  ;; (setq org-refile-targets '((org-agenda-files :maxlevel . 5)
  ;;                            (org-buffer-list :maxlevel . 2)))
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 5)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (message "After: Refile configurations from aaron bieber")


#+END_SRC


** Toggle function to display links or hide links              :KEYBINDINGS:
:PROPERTIES:
:ID:       71089dbe-9801-4e81-a78e-a21a59023bc1
:END:
URL: https://emacs.stackexchange.com/questions/5387/show-org-mode-hyperlink-as-plain-text
#+BEGIN_SRC emacs-lisp :results silent
  (defun dgg-org-toggle-link-display ()
      "Toggle the literal or descriptive display of links."
      (interactive)
      (if org-descriptive-links
          (progn (org-remove-from-invisibility-spec '(org-link))
                  (org-restart-font-lock)
                  (setq org-descriptive-links nil))
          (progn (add-to-invisibility-spec '(org-link))
                (org-restart-font-lock)
                (setq org-descriptive-links t))))

  (spacemacs/set-leader-keys-for-major-mode 'org-mode "l" 'dgg-org-toggle-link-display)
  (message "After: Toggle function to display links or hide links")
#+END_SRC

** Toggle function to display emphasis markers in org file or hide emphasis markers :KEYBINDINGS:
Inspiration: [[id:71089dbe-9801-4e81-a78e-a21a59023bc1][Toggle function to display links or hide links]]
#+BEGIN_SRC emacs-lisp :results silent
  (defun dgg-org-toggle-emphasis-display ()
    "Toggle the emphasis markers or show emphasis markers in org file."
    (interactive)
    (if org-hide-emphasis-markers
        (progn
          (setq org-hide-emphasis-markers nil)
          (message "setq org-hide-emphasis-markers=%s" org-hide-emphasis-markers))
        (progn
          (setq org-hide-emphasis-markers t)
          (message "setq org-hide-emphasis-markers=%s" org-hide-emphasis-markers))))

  (spacemacs/set-leader-keys-for-major-mode 'org-mode "h" 'dgg-org-toggle-emphasis-display)
  (message "After: Toggle function to display emphasis markers in org file or hide emphasis markers")
#+END_SRC

** Shutdown hooks
URL: [[https://emacs.stackexchange.com/questions/21754/how-to-automatically-save-all-org-files-after-marking-a-repeating-item-as-done-i][SO]]

#+BEGIN_SRC emacs-lisp :results silent

  ;; ORG-AGENDA CONFIGURATION
  ;; adding line numbers in tangle code blocks when hitting C-c '
  ;; Wrap long lines in org-mode
  ;; (add-hook 'org-mode-hook 'auto-fill-mode)
  ;; Force headings to be the same Size. Not sure if I'm crazy...
  (add-hook 'org-load-hook #'mb/org-mode-hook)

  ;; Ensure buffers are saved automatically to prevent sync errors
  ;; (add-hook 'auto-save-hook 'org-save-all-org-buffers)

  ;; Save file (if it exists) when cycling TODO states
  (advice-add 'org-todo           :after 'mb/save-buffer-if-file)
  (advice-add 'org-deadline       :after 'mb/save-buffer-if-file)
  (advice-add 'org-schedule       :after 'mb/save-buffer-if-file)
  (advice-add 'org-store-log-note :after 'mb/save-buffer-if-file)
  (message "After: Shutdown hooks")

#+END_SRC

** Org clock remove clocked tasks with 0:00 duration
URL: http://doc.norang.ca/org-mode.html#CaptureTemplates
#+BEGIN_SRC emacs-lisp :results silent

;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
(message "After: Org clock remove clocked tasks with 0:00 duration")

#+END_SRC


** Hide emphasis markers in emacs makes org files look clean
URL: [[http://doc.norang.ca/org-mode.html#CaptureTemplates][norang]]
#+BEGIN_SRC emacs-lisp :results silent

  ;; (setq org-hide-emphasis-markers t)
  (message "After: Hide emphasis markers in emacs makes org files look clean")

#+END_SRC

** Repeat last command set to SPC-.
#+begin_src emacs-lisp :results silent

  (spacemacs/set-leader-keys (kbd ".") 'repeat-complex-command)
  (message "After: Repeat last command set to SPC-.")

#+end_src

** Disable enlarged org-mode header appearance                 :SO_Solution:
Many themes seem to increase size of headers based on the level. I absolutely hate this, but would still want to keep the theme for headers. I found this solution on stack overflow.
URL: [[https://emacs.stackexchange.com/questions/22584/disable-enlarged-org-mode-header-appearance][SO-solution-for-enlarged-org-mode-headers]]
#+BEGIN_SRC emacs-lisp :results silent

  (defun my/org-mode-hook ()
    "Stop the org-level headers from increasing in height relative to the other text."
    (dolist (face '(org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
    (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

  (add-hook 'org-mode-hook #'my/org-mode-hook)
  (message "After: Disable enlarged org-mode header appearance")

#+END_SRC



** Changing the org-mode ellipsis to a more indicative symbol
URL: https://endlessparentheses.com/changing-the-org-mode-ellipsis.html
- Content of the URL not sure if this guys blog will stay forever
  Changing the org-mode ellipsis 02 Nov 2015, by Artur Malabarba.
  The dot-dot-dot ellipsis that org-mode uses to indicate hidden content is usually just fine. It’s only when you’re staring at a document where every line is a folded headline, that you start to feel like they’re a little too much “in your face”. I have a few org files with thousands of lines and hundreds of headlines, and changing that ... to something shorter greatly reduces visual clutter.

  The more straightforward option is to use a proper ellipsis character (the same effect with a third the length).

  (setq org-ellipsis "…")

  The one I’m currently using is a cornered arrow.

  (setq org-ellipsis "⤵")

  Other interesting characters are ▼, ↴, ⬎, ⤷, and ⋱.

- Code
  #+BEGIN_SRC emacs-lisp :results silent

  (setq org-ellipsis "⤵")
  (message "After: Changing the org-mode ellipsis to a more indicative symbol")
  #+END_SRC


** Org-Roam update the files last_updated tag when saving the file

- Description
  There's a healthy discussion here and Zaeph has given a clear example: [[https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/4][URL]]
- Code
  #+BEGIN_SRC emacs-lisp :results silent

      (add-hook 'before-save-hook #'zp/org-set-last-modified)

      (defun zp/org-find-time-file-property (property &optional anywhere)
        "Return the position of the time file PROPERTY if it exists.
      When ANYWHERE is non-nil, search beyond the preamble."
        (save-excursion
          (goto-char (point-min))
          (let ((first-heading
                 (save-excursion
                   (re-search-forward org-outline-regexp-bol nil t))))
            (when (re-search-forward (format "^#\\+%s:" property)
                                     (if anywhere nil first-heading)
                                     t)
              (point)))))

      (defun zp/org-has-time-file-property-p (property &optional anywhere)
        "Return the position of time file PROPERTY if it is defined.
      As a special case, return -1 if the time file PROPERTY exists but
      is not defined."
        (when-let ((pos (zp/org-find-time-file-property property anywhere)))
          (save-excursion
            (goto-char pos)
            (if (and (looking-at-p " ")
                     (progn (forward-char)
                            (org-at-timestamp-p 'lax)))
                pos
              -1))))

      (defun zp/org-set-time-file-property (property &optional anywhere pos)
        "Set the time file PROPERTY in the preamble.
      When ANYWHERE is non-nil, search beyond the preamble.
      If the position of the file PROPERTY has already been computed,
      it can be passed in POS."
        (when-let ((pos (or pos
                            (zp/org-find-time-file-property property))))
          (save-excursion
            (goto-char pos)
            (if (looking-at-p " ")
                (forward-char)
              (insert " "))
            (delete-region (point) (line-end-position))
            (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
              (insert now)))))

      (defun zp/org-set-last-modified ()
        "Update the LAST_MODIFIED file property in the preamble."
        (when (derived-mode-p 'org-mode)
          (zp/org-set-time-file-property "LAST_MODIFIED")))

    (message "After: Org-Roam update the files last_updated tag when saving the file")

  #+END_SRC


** Org narrow backwards and forwards
URL: https://github.com/zaeph/.emacs.d/blob/master/lisp/zp-org.el
#+BEGIN_SRC emacs-lisp :results silent
  ;; source https://github.com/zaeph/.emacs.d/blob/master/lisp/zp-org.el
  (defun zp/org-narrow-forwards ()
    "Move to the next subtree at same level, and narrow the buffer to it."
    (interactive)
    (widen)
    (org-forward-heading-same-level 1)
    (org-narrow-to-subtree)
    (when (called-interactively-p 'any)
      (message "Narrowing to next tree.")))

  (defun zp/org-narrow-backwards ()
    "Move to the next subtree at same level, and narrow the buffer to it."
    (interactive)
    (widen)
    (org-backward-heading-same-level 1)
    (org-narrow-to-subtree)
    (when (called-interactively-p 'any)
      (message "Narrowing to previous tree.")))

  (spacemacs/set-leader-keys-for-major-mode 'org-mode "nf" 'zp/org-narrow-forwards)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "nb" 'zp/org-narrow-backwards)
  (message "After: Org narrow backwards and forwards")
#+END_SRC


* Writeroom configurations

** Toggle line numbers in writeroom mode.                      :KEYBINDINGS:
URL: Fix the before evaluation error from here: https://github.com/syl20bnr/spacemacs/pull/9087/files#
#+BEGIN_SRC emacs-lisp :results silent

  (with-eval-after-load 'writeroom
    (spacemacs/set-leader-keys-for-minor-mode 'writeroom-mode "n" 'spacemacs/toggle-line-numbers))
  (message "After: Toggle line numbers in writeroom mode.")
#+END_SRC


* Magit
I use magit to handle version control. It’s lovely, but I tweak a few things:

- I bring up the status menu with C-x g.
- Use evil keybindings with magit.
- The default behavior of magit is to ask before pushing. I haven’t had any problems with accidentally pushing, so I’d rather not confirm that every time.
- Per tpope’s suggestions, highlight commit text in the summary line that goes beyond 50 characters.
- On the command line I’ll generally push a new branch with a plain old git push, which automatically creates a tracking branch on (usually) origin. Magit, by default, wants me to manually specify an upstream branch. This binds P P to magit-push-implicitly, which is just a wrapper around git push -v. Convenient!
- I’d like to start in the insert state when writing a commit message.

#+BEGIN_SRC emacs-lisp :results silent
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    ;; (use-package evil-magit)
    (use-package with-editor)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)

    ;; (with-eval-after-load 'magit-remote
    ;;   (magit-define-popup-action 'magit-push-popup ?P
    ;;     'magit-push-implicitly--desc
    ;;     'magit-push-implicitly ?p t))

    ;; (add-hook 'with-editor-mode-hook 'evil-insert-state)
    )
  (message "After: Magit")
#+END_SRC

* IVY Mode
URL : [[https://oremacs.com/swiper/#key-bindings][key-bindings]]

#+BEGIN_SRC emacs-lisp :results silent

(ivy-mode 1)

(global-set-key (kbd "C-x s") 'swiper)
(message "After: IVY Mode")
#+END_SRC

* Cursor marks
Setting cursor location by marking locations
http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html

To set a mark in emacs use
| keyboard shortcut | Function call      |
|-------------------+--------------------|
| C-c %             | org-mark-ring-push |
| C-c &             | org-mark-ring-goto |

Don't allow more than 6 locations in the buffer
#+BEGIN_SRC emacs-lisp :results silent
(setq mark-ring-max 40)
(setq global-mark-ring-max 40)
#+END_SRC

Tip: Single key <F7> and popping from mark-ring by <F8>
#+BEGIN_SRC emacs-lisp :results silent
  (defun xah-pop-local-mark-ring ()
    "Move cursor to last mark position of current buffer.
  Call this repeatedly will cycle all positions in `mark-ring'.
  URL `http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html'
  Version 2016-04-04"
    (interactive)
    (set-mark-command t))

  ;; (global-set-key (kbd "<f7>") 'pop-global-mark)
  ;; (global-set-key (kbd "<f8>") 'xah-pop-local-mark-ring)
  (message "After: Cursor marks")
#+END_SRC

* ibuffers configs
The source for these configuratios are the following URLs:
URL: [[http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html][ibuffers-instructions]]
URL: [[https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/][ibuffer-emmet-mz]]

To use Ibuffer do the following:

** Use Ibuffer for Buffer List
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
  (message "After: Use Ibuffer for Buffer List")
  #+END_SRC

** Other useful options
   There are a few other useful options that I didn’t find out about until I looked through the source:

*** ibuffer-expert
     Unless you turn this variable on you will be prompted every time you want to delete a buffer, even unmodified ones, which is way too cautious for most people. You’ll still be prompted for confirmation when deleting modified buffers after the option has been turned off.
     #+BEGIN_SRC emacs-lisp :results silent
       (setq ibuffer-expert t)
       (message "After: ibuffer-expert")
     #+END_SRC

*** ibuffer-show-empty-filter-groups
     Turning off ibuffer-show-empty-filter-groups is particularly useful, because the empty filter groups can really clutter things up.
     #+BEGIN_SRC emacs-lisp :results silent
       (setq ibuffer-show-empty-filter-groups nil)
       (message "After: ibuffer-show-empty-filter-groups")
     #+END_SRC

*** ibuffer-auto-mode
     =ibuffer-auto-mode= is a minor mode that automatically keeps the buffer list up to date. I turn it on in my =ibuffer-mode-hook=:
     #+BEGIN_SRC emacs-lisp :results silent
       (add-hook 'ibuffer-mode-hook
                 '(lambda ()
                    (ibuffer-auto-mode 1)
                    (ibuffer-switch-to-saved-filter-groups "default")))
       (message "After: ibuffer-auto-mode")
     #+END_SRC

* Buffers indirection

** Sub-tree indirect to buffer
#+BEGIN_SRC emacs-lisp :results silent
(defun org-subtree-to-indirect-buffer ()
  (interactive)
  (let ((ind-buf (concat (buffer-name) "-narrowclone")))
    (if (get-buffer ind-buf)
        (kill-buffer ind-buf))
    (clone-indirect-buffer-other-window ind-buf t)
    (org-narrow-to-subtree)
    (switch-to-buffer ind-buf)))
(message "After: Sub-tree indirect to buffer")
#+END_SRC

** Toggle Revert Buffer without or with confirmation
URL: [[https://www.emacswiki.org/emacs/RevertBuffer][emacs-wiki-email-thread]]
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "s-r")
   (lambda (&optional force-reverting)
     "Interactive call to revert-buffer. Ignoring the auto-save
   file and not requesting for confirmation. When the current buffer
   is modified, the command refuses to revert it, unless you specify
   the optional argument: force-reverting to true."
     (interactive "P")
     ;;(message "force-reverting value is %s" force-reverting)
     (if (or force-reverting (not (buffer-modified-p)))
         (revert-buffer :ignore-auto :noconfirm)
       (error "The buffer has been modified"))))
  (message "After: Toggle Revert Buffer without or with confirmation")
#+END_SRC


* Todo keywords
** Fast Todo Selection
Fast todo selection allows changing from any task todo state to any other state directly.

#+BEGIN_SRC emacs-lisp :results silent
(setq org-use-fast-todo-selection t)

(setq org-treat-S-cursor-todo-selection-as-state-change nil)
(message "After: Fast Todo Selection")
#+END_SRC

* My shortcut keys
** Move to next method and previous method
#+BEGIN_SRC emacs-lisp :results silent
  (global-set-key (kbd "M-[") 'beginning-of-defun)
  (global-set-key (kbd "M-]") 'end-of-defun)
  (message "After: Move to next method and previous method")
#+END_SRC

** Forcing org-mode to open a link in another frame not window
#+BEGIN_SRC emacs-lisp :results silent
(defun dgg/org-open-other-frame ()
  "Jump to bookmark in another frame. See `bookmark-jump' for more."
  (interactive)
  (let ((org-link-frame-setup (cons (cons 'file 'find-file-other-frame) org-link-frame-setup)))
    (org-open-at-point)))

(global-set-key (kbd "C-c 5 C-o") 'dgg/org-open-other-frame)
(message "After: Forcing org-mode to open a link in another frame not window")

#+END_SRC

* Xah functions being used
URL: http://ergoemacs.org/emacs/modernization_mark-word.html
Most of this section is direct rip off of xah's block editing functions.
** Select text between Quotes/Braces
#+BEGIN_SRC emacs-lisp :results silent

  (defun xah-select-text-in-quote ()
    "Select text between the nearest left and right delimiters.
  Delimiters here includes the following chars: \"`<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕（）
  This command select between any bracket chars, does not consider nesting. For example, if text is
  (a(b)c▮)
  the selected char is “c”, not “a(b)c”.

  URL `http://ergoemacs.org/emacs/modernization_mark-word.html'
  Version 2020-11-24 2021-07-11"
    (interactive)
    (let ( $skipChars $p1 )
      (setq $skipChars "^\"`<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕（）〘〙")
      (skip-chars-backward $skipChars)
      (setq $p1 (point))
      (skip-chars-forward $skipChars)
      (set-mark $p1)))

  (message "XAH: Select text between Quotes/Braces")
#+END_SRC


"a(b)c"
** Xah Extend Selection
#+BEGIN_SRC emacs-lisp :results silent

  (defun xah-extend-selection ()
    "Select the current word, bracket/quote expression, or expand selection.
  Subsequent calls expands the selection.

  when there's no selection,
  • if cursor is on a any type of bracket (including parenthesis, quotation mark), select whole bracketed thing including bracket
  • else, select current word.

  when there's a selection, the selection extension behavior is still experimental. But when cursor is on a any type of bracket (parenthesis, quote), it extends selection to outer bracket.

  URL `http://ergoemacs.org/emacs/modernization_mark-word.html'
  Version 2020-02-04"
    (interactive)
    (if (region-active-p)
        (progn
          (let (($rb (region-beginning)) ($re (region-end)))
            (goto-char $rb)
            (cond
             ((looking-at "\\s(")
              (if (eq (nth 0 (syntax-ppss)) 0)
                  (progn
                    ;; (message "left bracket, depth 0.")
                    (end-of-line) ; select current line
                    (set-mark (line-beginning-position)))
                (progn
                  ;; (message "left bracket, depth not 0")
                  (up-list -1 t t)
                  (mark-sexp))))
             ((eq $rb (line-beginning-position))
              (progn
                (goto-char $rb)
                (let (($firstLineEndPos (line-end-position)))
                  (cond
                   ((eq $re $firstLineEndPos)
                    (progn
                      ;; (message "exactly 1 line. extend to next whole line." )
                      (forward-line 1)
                      (end-of-line)))
                   ((< $re $firstLineEndPos)
                    (progn
                      ;; (message "less than 1 line. complete the line." )
                      (end-of-line)))
                   ((> $re $firstLineEndPos)
                    (progn
                      ;; (message "beginning of line, but end is greater than 1st end of line" )
                      (goto-char $re)
                      (if (eq (point) (line-end-position))
                          (progn
                            ;; (message "exactly multiple lines" )
                            (forward-line 1)
                            (end-of-line))
                        (progn
                          ;; (message "multiple lines but end is not eol. make it so" )
                          (goto-char $re)
                          (end-of-line)))))
                   (t (error "logic error 42946" ))))))
             ((and (> (point) (line-beginning-position)) (<= (point) (line-end-position)))
              (progn
                ;; (message "less than 1 line" )
                (end-of-line) ; select current line
                (set-mark (line-beginning-position))))
             (t
              ;; (message "last resort" )
              nil))))
      (progn
        (cond
         ((looking-at "\\s(")
          ;; (message "left bracket")
          (mark-sexp)) ; left bracket
         ((looking-at "\\s)")
          ;; (message "right bracket")
          (backward-up-list) (mark-sexp))
         ((looking-at "\\s\"")
          ;; (message "string quote")
          (mark-sexp)) ; string quote
         ;; ((and (eq (point) (line-beginning-position)) (not (looking-at "\n")))
         ;;  (message "beginning of line and not empty")
         ;;  (end-of-line)
         ;;  (set-mark (line-beginning-position)))
         ((or (looking-back "\\s_" 1) (looking-back "\\sw" 1))
          ;; (message "left is word or symbol")
          (skip-syntax-backward "_w" )
          ;; (re-search-backward "^\\(\\sw\\|\\s_\\)" nil t)
          (push-mark)
          (skip-syntax-forward "_w")
          (setq mark-active t)
          ;; (exchange-point-and-mark)
          )
         ((and (looking-at "\\s ") (looking-back "\\s " 1))
          ;; (message "left and right both space" )
          (skip-chars-backward "\\s " ) (set-mark (point))
          (skip-chars-forward "\\s "))
         ((and (looking-at "\n") (looking-back "\n" 1))
          ;; (message "left and right both newline")
          (skip-chars-forward "\n")
          (set-mark (point))
          (re-search-forward "\n[ \t]*\n")) ; between blank lines, select next text block
         (t
          ;; (message "just mark sexp" )
          (mark-sexp)
          (exchange-point-and-mark))
         ;;
         ))))

  (message "After: Xah Extend Selection")
#+END_SRC

** Xah Move between cursor to Bracket/Quote                    :KEYBINDINGS:
:PROPERTIES:
:ID:       c8b06df2-a11b-4c25-b0be-ba89480d219d
:END:
URL: http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html

#+BEGIN_SRC emacs-lisp :results silent
  (defvar xah-brackets nil "string of left/right brackets pairs.")
  (setq xah-brackets "()[]{}<>（）［］｛｝⦅⦆〚〛⦃⦄“”‘’‹›«»「」〈〉《》【】〔〕⦗⦘『』〖〗〘〙｢｣⟦⟧⟨⟩⟪⟫⟮⟯⟬⟭⌈⌉⌊⌋⦇⦈⦉⦊❛❜❝❞❨❩❪❫❴❵❬❭❮❯❰❱❲❳〈〉⦑⦒⧼⧽﹙﹚﹛﹜﹝﹞⁽⁾₍₎⦋⦌⦍⦎⦏⦐⁅⁆⸢⸣⸤⸥⟅⟆⦓⦔⦕⦖⸦⸧⸨⸩｟｠⧘⧙⧚⧛⸜⸝⸌⸍⸂⸃⸄⸅⸉⸊᚛᚜༺༻༼༽⏜⏝⎴⎵⏞⏟⏠⏡﹁﹂﹃﹄︹︺︻︼︗︘︿﹀︽︾﹇﹈︷︸")

  (defvar xah-left-brackets '("(" "{" "[" "<" "〔" "【" "〖" "〈" "《" "「" "『" "“" "‘" "‹" "«" )
    "List of left bracket chars.")
  (progn
  ;; make xah-left-brackets based on xah-brackets
    (setq xah-left-brackets '())
    (dotimes ($x (- (length xah-brackets) 1))
      (when (= (% $x 2) 0)
        (push (char-to-string (elt xah-brackets $x))
              xah-left-brackets)))
    (setq xah-left-brackets (reverse xah-left-brackets)))

  (defvar xah-right-brackets '(")" "]" "}" ">" "〕" "】" "〗" "〉" "》" "」" "』" "”" "’" "›" "»")
    "list of right bracket chars.")
  (progn
    (setq xah-right-brackets '())
    (dotimes ($x (- (length xah-brackets) 1))
      (when (= (% $x 2) 1)
        (push (char-to-string (elt xah-brackets $x))
              xah-right-brackets)))
    (setq xah-right-brackets (reverse xah-right-brackets)))

  (defun xah-backward-left-bracket ()
    "Move cursor to the previous occurrence of left bracket.
  The list of brackets to jump to is defined by `xah-left-brackets'.
  URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
  Version 2015-10-01"
    (interactive)
    (re-search-backward (regexp-opt xah-left-brackets) nil t))

  (defun xah-forward-right-bracket ()
    "Move cursor to the next occurrence of right bracket.
  The list of brackets to jump to is defined by `xah-right-brackets'.
  URL `http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html'
  Version 2015-10-01"
    (interactive)
    (re-search-forward (regexp-opt xah-right-brackets) nil t))

  (global-set-key (kbd "M-[") 'xah-backward-left-bracket)

  (global-set-key (kbd "M-]") 'xah-forward-right-bracket)

  (message "After: Xah Move between cursor to Bracket/Quote")

#+END_SRC



* Java Setup
** +Log4j setup Notes+
[[https://writequit.org/articles/working-with-logs-in-emacs.html][URl WriteQuitNotes]]

#+BEGIN_SRC emacs-lisp :tangle no
;; Configuration:

;; You can customize the faces that are used for syntax highlighting.
;; Type `M-x customize-group' and enter group name "log4j-mode".
;;
;; To customize the regular expressions used to identify log records for
;; syntax highlighting, change the variables `log4j-match-error-regexp'
;; etc.
;;
;; You can also customize the regular expressions that are used to find the
;; beginning and end of multi-line log records. However, in many cases this
;; will not be necessary. Log4j mode can automatically detect single-line and
;; multi-line log records created by Log4j and JDK's built-in logging package.
;;
;; Log file buffers are auto reverted by default. If you don't like that,
;; set `log4j-auto-revert-flag' to nil.
;;
;; If you use the arrow keys to move around in the text, you can define `C-up'
;; and `C-down' to move to the end and beginning of the current log record.
;; Put the following lines of code in your init file:
;;
;; (add-hook
;;  'log4j-mode-hook
;;  (lambda ()
;;    (define-key log4j-mode-local-map [(control down)] 'log4j-forward-record)
;;    (define-key log4j-mode-local-map [(control up)] 'log4j-backward-record)))

;; XEmacs:

;; XEmacs tends to move the point to `point-min' when auto reverting a buffer.
;; Setting the customizable variable `log4j-restore-point-flag' to 't leaves
;; the point at its original position.
;;
;; To tell XEmacs which tags table files to use for log files, modify variable
;; `tag-table-alist' to include log files. Using the example in file "jtags.el"
;; you could put the following lines of code in your init file:
;;
;; (setq tag-table-alist '(("\\.\\(java\\|log\\)$" . "c:/java/j2sdk1.4.2/src")
;;                         ("\\.\\(java\\|log\\)$" . "c:/projects/tetris/src")))

#+END_SRC

** Java indentation
URL [java-code][http://blog.binchen.org/posts/ccjava-code-indentation-in-emacs.html]
#+BEGIN_SRC emacs-lisp :results silent
  (defun fix-c-indent-offset-according-to-syntax-context (key val)
    ;; remove the old element
    (setq c-offsets-alist (delq (assoc key c-offsets-alist) c-offsets-alist))
    ;; new value
    (add-to-list 'c-offsets-alist '(key . val)))


  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
               (setq c-basic-offset 2
                     tab-width 2
                     indent-tabs-mode t)
               ;; indent
               (fix-c-indent-offset-according-to-syntax-context 'substatement 0)
               (fix-c-indent-offset-according-to-syntax-context 'func-decl-cont 0))
              ))
  (message "After: Java indentation")
#+END_SRC

** eclim installation
#+BEGIN_SRC emacs-lisp :tangle no
;; (require 'eclim)
;; (global-eclim-mode)
;;
;;
;; (custom-set-variables
;;   '(eclim-eclipse-dirs '("/Applications/java-2018-122/Eclipse.app/Contents/Eclipse"))
;;   '(eclim-executable "/Applications/java-2018-122/Eclipse.app/Contents/Eclipse/eclimd"))
#+END_SRC

* Dgg functions
** My functions for shortcuts
These functions define shortcuts or abbreviations for java setup. The shortcuts are kept as simple as possible for java and src.
#+BEGIN_SRC emacs-lisp :results silent

    (defun dgg-java-src ()
       (interactive)
       (insert "#+HEADERS: :classname Solution :cmdline \"-cp . -ea\"\n#+BEGIN_SRC java -n -r :RESULTS output :exports both\nclass Solution {\n\tpublic static void main(String args[]) {\n\n\t}\n}\n\n#+END_SRC\n\n#+RESULTS:\n"))

    (defun dgg-python-src ()
       (interactive)
       (insert "#+BEGIN_SRC python -n -r :results output :exports both\n\ndef method(n):\n\t\tprint(n)\n\nmethod(10)\n#+END_SRC\n\n#+RESULTS:\n\n"))

    (defun dgg-shell-src ()
       (interactive)
       (insert "#+BEGIN_SRC shell -n -r :results output :exports both\n\n\n#+END_SRC\n\n#+RESULTS:\n\n"))

    (defun dgg-emacs-src ()
       (interactive)
       (insert "#+BEGIN_SRC emacs-lisp :results silent\n\n\n#+END_SRC\n\n"))

    (defun dgg-text-src ()
       (interactive)
       (insert "#+BEGIN_SRC text\n\n\n#+END_SRC\n\n"))

    (defun dgg-italic-bold-begin ()
       (interactive)
       (insert "/\` *"))

    (defun dgg-italic-bold-end ()
       (interactive)
       (insert "* \`/"))

    (defun dgg-bold-highlight-begin ()
       (interactive)
       (insert "*   ="))

    (defun dgg-bold-highlight-end ()
       (interactive)
       (insert "=  *"))

    (defun dgg-org-src-old ()
       (interactive)
       (insert "DOC TITLE -*- mode: org -*-\n#+LANGUAGE:  en\n#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline path:http://orgmode.org/org-info.js\n#+LINK_HOME: http://ehneilsen.net\n#+LINK_UP: http://ehneilsen.net/notebook\n#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/notebook.css\" />\n\n#+STARTUP:    indent hidestars\n\n#+OPTIONS:    num:nil \n\n#+TITLE: Bucket Sort"))

    (defun dgg-org-src ()
       (interactive)
       (insert "-*- File Name -*-\n#+TITLE: FileName\n#+AUTHOR:    Dhawan Gayash\n#+LANGUAGE:  en\n#+OPTIONS:   H:10 num:nil toc:10\n#+STARTUP:    indent hidestars\n#+OPTIONS:    num:nil \n#+SETUPFILE: /Users/tmp/workdir/inter/interview/html_pages/theme-readtheorg.setup"))

    (defun dgg-read-only-mode-directive ()
       (interactive)
       (insert "-*- buffer-read-only: t -*-"))

    ;; (global-set-key (kbd "C-c f") 'dgg-java-src)
    ;; (global-set-key (kbd "C-c p") 'dgg-python-src)
    ;; (global-set-key (kbd "C-c s") 'dgg-shell-src)
    ;; (global-set-key (kbd "C-c q") 'dgg-org-src)

    ;; (global-set-key (kbd "C-c t") 'dgg-text-src)
    ;; (global-set-key (kbd "C-c e") 'dgg-emacs-src)
    ;; (global-set-key (kbd "C-c y") 'dgg-read-only-mode-directive)

    ;; comment and uncomment code sections
    ;; (global-set-key (kbd "C-c C-;") 'comment-or-uncomment-region)

    ;; (Global-set-key (kbd "C-c i") 'dgg-italic-bold-begin)
    ;; (global-set-key (kbd "C-c o") 'dgg-italic-bold-end)
  (message "After: My functions for shortcuts")
#+END_SRC
** Insert around region
URL: [[http://ergoemacs.org/emacs/elisp_examples.html][ErgoMacs from xah-lee]]
#+BEGIN_SRC emacs-lisp :results silent

  (defun wrap-markup-bold-quotes-region (start end)
    "Insert a markup / * and * // around a region."
    (interactive "r")
    (save-excursion
      (goto-char end) (insert "* //")
      (goto-char start) (insert "/ *")))

  (defun wrap-markup-bold-region (start end)
    "Insert a markup * and * around a region."
    (interactive "r")
    (save-excursion
      (goto-char end) (insert "*")
      (goto-char start) (insert "*")))

  (defun wrap-markup-italic-region (start end)
    "Insert a markup * and * around a region."
    (interactive "r")
    (save-excursion
      (goto-char end) (insert "/")
      (goto-char start) (insert "/")))

  (defun wrap-markup-italic-underscore-region (start end)
    "Insert a markup /_ and _/ around a region."
    (interactive "r")
    (save-excursion
      (goto-char end) (insert " ̣/")
      (goto-char start) (insert " /̣")))

  (defun wrap-markup-bold-italic-region (start end)
    "Insert a markup /[_] and [_]/ around a region."
    (interactive "r")
    (save-excursion
      (goto-char end) (insert "/ ❕*")
      (goto-char start) (insert "*❕ /")))

  ;; (global-set-key (kbd "C-c o") 'wrap-markup-bold-quotes-region)
  ;; (global-set-key (kbd "C-c m") 'wrap-markup-italic-underscore-region)

  ;; (global-set-key (kbd "C-c n") 'wrap-markup-bold-italic-region)

  ;; (global-set-key (kbd "C-c b") 'wrap-markup-bold-region)
  ;; (global-set-key (kbd "C-c i") 'wrap-markup-italic-region)

  ;; http://ergoemacs.org/emacs/elisp_examples.html
  (defun wrap-markup-region ()
    "Insert a markup #+begin_src text\n\n#+end_src around a region."
    (interactive)
    (save-excursion
      (goto-char (region-end))
      (insert "#+end_src \n")
      (goto-char (region-beginning))
      (insert "#+begin_src text \n")))

  (message "After: Insert around region")
#+END_SRC

*❕ /global-set-key/ ❕*

** Unicode chars
:PROPERTIES:
:ID:       D0B1FB9A-E9CD-4388-A0B3-E413EC8601CE
:END:
URL: [[https://emacs.stackexchange.com/questions/7254/idiomatic-way-of-extending-keymap-for-inserting-unicode-symbols][Unicode-horizontal-ellipses]]
#+BEGIN_SRC emacs-lisp :results silent

(define-key 'iso-transl-ctl-x-8-map "." "…")
(message "After: Unicode chars")
#+END_SRC

** Using Rainer Konig's blog about keeping three most important things
:PROPERTIES:
:ID:       5886F113-0C39-4FEC-B57B-19E89D794D99
:END:
URL: [[id:5886F113-0C39-4FEC-B57B-19E89D794D99][Using Rainer Konig's blog about keeping three most important things]]
URL: [[https://koenig-haunstetten.de/2018/02/17/improving-my-orgmode-workflow/][Koenig-url]]
#+BEGIN_SRC emacs-lisp :results silent

  (defun dgg-copy-idlink-to-clipboard()
    "Copy an ID link with the
      headline to killring, if no ID is there then create a new unique
      ID.  This function works only in org-mode or org-agenda buffers.
      The purpose of this function is to easily construct id:-links to
      org-mode items. If its assigned to a key it saves you marking the
      text and copying to the killring."
    (interactive)
    (when (eq major-mode 'org-agenda-mode) ;switch to orgmode
      (org-agenda-show)
      (org-agenda-goto))
    (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
      (setq mytmphead (nth 4 (org-heading-components)))
      (setq mytmpid (funcall 'org-id-get-create))
      (setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead))
      (kill-new mytmplink)
      (message "Copied %s to killring (clipboard)" mytmplink)
      ))

  (global-set-key (kbd "<f5>") 'dgg-copy-idlink-to-clipboard)

  (message "After: Using Rainer Konig's blog about keeping three most important things")
#+END_SRC

** Function to convert a word into it's "ing" form             :KEYBINDINGS:
URL: https://stackoverflow.com/questions/25188206/how-do-you-write-an-emacs-lisp-function-to-replace-a-word-at-point/25188590

#+BEGIN_SRC emacs-lisp :results silent

  (defun dgg-word-or-region-to-lcc ()
    "Convert word at point (or selected region) to lower camel case."
    (interactive)
    (let* ((bounds (if (use-region-p)
                       (cons (region-beginning) (region-end))
                     (bounds-of-thing-at-point 'symbol)))
           (text   (buffer-substring-no-properties (car bounds) (cdr bounds))))
      (when bounds
        (delete-region (car bounds) (cdr bounds))
        (insert (concat text "ing")))))

  (global-set-key (kbd "C-M-'") 'dgg-word-or-region-to-lcc)

#+END_SRC

** Xah fly keys insert quotes around region
URL: https://github.com/xahlee/xah-fly-keys/blob/master/xah-fly-keys.el
#+BEGIN_SRC emacs-lisp :results silent
  (defun xah-quote-lines (Begin End QuoteL QuoteR Sep)
    "Add quotes/brackets and separator (comma) to lines.
  Act on current block or selection.
  For example,
   cat
   dog
   cow
  becomes
   \"cat\",
   \"dog\",
   \"cow\",
  or
   (cat)
   (dog)
   (cow)
  In lisp code, QuoteL QuoteR Sep are strings.
  URL `http://ergoemacs.org/emacs/emacs_quote_lines.html'
  Version 2020-06-26 2021-07-21 2021-08-15 2021-09-15"
    (interactive
     (let* (($bds (xah-get-bounds-of-block-or-region))
           ($p1 (car $bds))
           ($p2 (cdr $bds))
           ($brackets
            '(
              "\"double\""
              "'single'"
              "(paren)"
              "{brace}"
              "[square]"
              "<greater>"
              "`emacs'"
              "`markdown`"
              "~tilde~"
              "=equal="
              "“curly double”"
              "‘curly single’"
              "‹french angle›"
              "«french double angle»"
              "「corner」"
              "none"
              "other"
              )) $bktChoice $sep $sepChoice $quoteL $quoteR)
       (setq $bktChoice (ido-completing-read "Quote to use:" $brackets))
       (setq $sepChoice (ido-completing-read "line separator:" '("," ";" "none" "other")))
       (cond
        ((string-equal $bktChoice "none")
         (setq $quoteL "" $quoteR ""))
        ((string-equal $bktChoice "other")
         (let (($x (read-string "Enter 2 chars, for begin/end quote:")))
           (setq $quoteL (substring-no-properties $x 0 1)
                 $quoteR (substring-no-properties $x 1 2))))
        (t (setq $quoteL (substring-no-properties $bktChoice 0 1)
                 $quoteR (substring-no-properties $bktChoice -1))))
       (setq $sep
             (cond
              ((string-equal $sepChoice "none") "")
              ((string-equal $sepChoice "other") (read-string "Enter separator:"))
              (t $sepChoice)))
       (list $p1 $p2 $quoteL $quoteR $sep)))
    (let (($p1 Begin) ($p2 End) ($quoteL QuoteL) ($quoteR QuoteR) ($sep Sep))
      (save-excursion
        (save-restriction
          (narrow-to-region $p1 $p2)
          (goto-char (point-min))
          (catch 'EndReached
            (while t
              (skip-chars-forward "\t ")
              (insert $quoteL)
              (end-of-line)
              (insert $quoteR $sep)
              (if (eq (point) (point-max))
                  (throw 'EndReached t)
                (forward-char))))))))


  (defun xah-get-bounds-of-block ()
    "Return the boundary (START . END) of current block.
  Version 2021-08-12"
    (let ( $p1 $p2 ($blankRegex "\n[ \t]*\n"))
      (save-excursion
        (setq $p1 (if (re-search-backward $blankRegex nil 1)
                      (goto-char (match-end 0))
                    (point)))
        (setq $p2 (if (re-search-forward $blankRegex nil 1)
                      (match-beginning 0)
                    (point))))
      (cons $p1 $p2 )))

  (defun xah-get-bounds-of-block-or-region ()
    "If region is active, return its boundary, else same as `xah-get-bounds-of-block'.
  Version 2021-08-12"
    (if (region-active-p)
        (cons (region-beginning) (region-end))
      (xah-get-bounds-of-block)))

#+END_SRC



* Clipboard managment using ivy
** +Counsel-Yank-Pop With a Tweak+
- URL :: [[http://pragmaticemacs.com/emacs/counsel-yank-pop-with-a-tweak/][URL-ivy-mode]]
One of my favourites is counsel-yank-pop which replaces the standard clipboard history (kill-ring in Emacs terminology) with an ivy-powered version. You can then type search strings to filter your clipboard history dynamically.
  #+BEGIN_SRC emacs-lisp :results silent

    ;; (use-package counsel
    ;;   :bind
    ;;   (("M-y" . counsel-yank-pop)
    ;;   :map ivy-minibuffer-map
    ;;   ("M-y" . ivy-next-line)))

  #+END_SRC

** Add the System Clipboard to the emacs-kill-ring
- URL :: [[http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/][URL-kill-ring-config]]]
- Kill ring URL :: [[https://emacs.stackexchange.com/questions/766/add-operating-system-clipboard-to-kill-ring][Kill-ring-enable]]
I wrote previously about adding mouse selections in Emacs to the system clipboard, and here is another tip to integrate the system clipboard more nicely with Emacs. This comes from the fantastic Emacs operating system set of configuration files, which are full of gems like this (thanks to Irreal for pointing me to EOS).

#+BEGIN_Quote text
Kill ring can be accessed using
M-y and M-S-y
#+END_Quote

** Enable storing everything into clipboard not just within emacs.
Save whatever’s in the current (system) clipboard before replacing it with the Emacs’ text. https://github.com/dakrone/eos/blob/master/eos.org

#+BEGIN_SRC emacs-lisp :results silent

(setq save-interprogram-paste-before-kill t)
(setq select-enable-clipboard t)

(message "After: Enable storing everything into clipboard not just within emacs.")
#+END_SRC

* Setup Emacs as a SQL database client
Followed instructions from this URL: [[https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client][URL-emacs-sql]]
** Adding SQL mode
#+BEGIN_SRC emacs-lisp :results silent

    (require 'sql)

    (add-hook 'sql-interactive-mode-hook
              (lambda ()
                (toggle-truncate-lines t)))
    (message "After: Adding SQL mode")
#+END_SRC

** SQL mode
- History save sessions in emacs
  #+BEGIN_SRC emacs-lisp :results silent

    (defun my-sql-save-history-hook ()
      (let ((lval 'sql-input-ring-file-name)
            (rval 'sql-product))
        (if (symbol-value rval)
            (let ((filename
                   (concat "~/.emacs.d/sql/"
                           (symbol-name (symbol-value rval))
                           "-history.sql")))
              (set (make-local-variable lval) filename))
          (error
           (format "SQL history will not be saved because %s is nil"
                   (symbol-name rval))))))

    (add-hook 'sql-interactive-mode-hook 'my-sql-save-history-hook)
    (message "After: SQL mode")
  #+END_SRC
* CamelCaseing and Lower caseing in emacs
URL: [[https://stackoverflow.com/questions/9288181/converting-from-camelcase-to-in-emacs][SO-elisp-code]]
#+BEGIN_SRC emacs-lisp :results silent
  (defun to-underscore ()
    "Convert underscore naming convention to camel case naming convention.
  This function replaces all the underscores in the region to camel case."
    (interactive)
    (progn
      (replace-regexp "\\([A-Z]\\)" "_\\1" nil (region-beginning) (region-end))
      (downcase-region (region-beginning) (region-end))))

  (defun toggle-camelcase-underscores ()
    "Toggle between camelcase and underscore notation for the symbol at point."
    (interactive "r")
    (save-excursion
      (let* ((bounds (bounds-of-thing-at-point 'symbol))
             (start (car bounds))
             (end (cdr bounds))
             (currently-using-underscores-p (progn (goto-char start)
                                                   (re-search-forward "_" end t))))
        (if currently-using-underscores-p
            (progn
              (upcase-initials-region start end)
              (replace-string "_" "" nil start end)
              (downcase-region start (1+ start)))
          (replace-regexp "\\([A-Z]\\)" "_\\1" nil (1+ start) end)
          (downcase-region start (cdr (bounds-of-thing-at-point 'symbol)))))))

  (message "After: CamelCaseing and Lower caseing in emacs")
#+END_SRC
* Spacemacs configs
** +Turn on auto fill mode.+
#+BEGIN_SRC emacs-lisp :results silent :tangle no

;; (add-hook 'org-mode-hook 'turn-on-auto-fill)

#+END_SRC
** Turn off auto fill mode.
#+BEGIN_SRC emacs-lisp :results silent

  ;; DO NOT AUTOMATICALLY autofill
  (auto-fill-mode -1)
  (message "After: Turn off auto fill mode.")

#+END_SRC
** Enable visual-line-mode
URL: http://ergoemacs.org/emacs/emacs_long_line_wrap.html
#+BEGIN_SRC emacs-lisp :results silent
(global-visual-line-mode t)
(message "After: Enable visual-line-mode")
#+END_SRC

** Global visual line mode
#+begin_src emacs-lisp :results silent :tangle no
;; (global-visual-line-mode)
#+end_src

** DGG helper functions
URL: https://emacs.stackexchange.com/questions/29836/how-to-get-the-headline-title-using-org-entry-get/29884
#+BEGIN_SRC emacs-lisp :results silent

  (defun dgg-debug-msg-adder()
    " My function to get current heading.
  This function will pick the org mode heading at point and
  create a message debug statement. This is very useful in the dgg-settings.org
  when you want to check init loader."
    (interactive)
    (kill-new (concat "(message \"After: " (nth 4 (org-heading-components)) "\")")))

  (global-set-key (kbd "C-c M-/") 'dgg-debug-msg-adder)
  (message "After: DGG helper functions")
#+END_SRC

** +Update PATH variables+
- Note taken on [2021-06-09 Wed 14:19] \\
  SDKMAN is only being used in desktop as of now.
- Code
  #+BEGIN_SRC emacs-lisp :tangle no :results silent
    ;; (when (string-equal system-type "gnu/linux")
    ;;   (let (
    ;;         (mypaths
    ;;          '(
    ;;            "/home/dgg/.pyenv/plugins/pyenv-virtualenv/shims"
    ;;            "/home/dgg/.pyenv/shims"
    ;;            "/home/dgg/.pyenv/bin"
    ;;            "/home/dgg/.sdkman/candidates/java/current/bin"
    ;;            "/usr/local/sbin"
    ;;            "/usr/local/bin"
    ;;            "/usr/sbin"
    ;;            "/usr/bin"
    ;;            "/sbin"
    ;;            "/bin"
    ;;            "/usr/games"
    ;;            "/usr/local/games"
    ;;            "/snap/bin"
    ;;            ))
    ;;         )

    ;;     (setenv "PATH" (mapconcat 'identity mypaths ":") )

    ;;     (setq exec-path (append mypaths (list "." exec-directory)) )
    ;;     ))

    ;; (message "After: Update PATH variables")

  #+END_SRC

** Making IELM usage bare-able with autopair or paraedit
URL: http://emacs-fu.blogspot.com/2011/03/ielm-repl-for-emacs.html
#+BEGIN_SRC emacs-lisp :results silent

  ;; use C-j instead of RETURN
  (setq ielm-dynamic-return nil)
  (message "After: Making IELM usage bare-able with autopair or paraedit")

#+END_SRC

** Remove the advice to enable scroll-bar for a few seconds when using mouse scrolling
#+BEGIN_SRC emacs-lisp :results silent

  ;; remvoe this advice I don't ever want the scrollbar.
  (advice-remove 'mwheel-scroll #'spacemacs//scroll-bar-show-delayed-hide)
  (message "After: Remove the advice to enable scroll-bar for a few seconds when using mouse scrolling")

#+END_SRC


** Mouse click issue
This is an issue where the mouse click causes two commands to be executed namely:

#+begin_quote
<down-mouse-1>  ;; mouse-drag-region
<mouse-1>       ;; mouse-set-point
#+end_quote

This causes all sorts of issues, the hacky way to fix this issue is to unset the key-binding for <mouse-1> action. This is done by the following elisp command.

#+begin_src emacs-lisp :results silent
(define-key evil-motion-state-map [mouse-1] 'ignore)
#+end_src

* Enhancing the speed of spacemacs owing to flyspell performance issues
+ Github tracker: https://github.com/syl20bnr/spacemacs/issues/11909
a +Disabling flyspell by default:+ [[https://gist.github.com/metamorph/69f37f7686164e7c4d94][github-gist-disable-flyspell-by-default]]
+ Disabling using the configuration layers variable: [[https://develop.spacemacs.org/layers/+checkers/spell-checking/README.html#disabling-by-default][disable-by-default-spacemacs]]

#+BEGIN_SRC emacs-lisp :results silent

  (remove-hook 'text-mode-hook 'dgg-enable-flyspell-mode)
  (remove-hook 'org-mode-hook 'dgg-enable-flyspell-mode)
  (remove-hook 'markdown-mode-hook 'dgg-enable-flyspell-mode)
  (message "After: Enhancing the speed of spacemacs owing to flyspell performance issues")

#+END_SRC

* Xah parenthesis
** Xah Emacs Commands
Emacs: Insert Brackets by Pair 🚀
By Xah Lee. Date: 2011-11-25. Last updated: 2022-10-04.
This page shows a command xah-insert-bracket-pair to insert bracket pair, better than the emacs builtin ~electric-pair-mode~.

Emacs has electric-pair-mode , which insert a bracket pair when you type the left bracket. [see Emacs: Insert Bracket Pairs, electric-pair-mode]

** Problems of electric-pair-mode
Which brackets it will close depends on the Syntax Table. Sometimes it does not close curly brackets {} (e.g. In emacs-lisp-mode). Sometimes it pairs single quote (e.g. In js-mode). The keys to insert brackets is typed by your stretched pinky. Not ergonomic. Advantages of xah-insert-bracket-pair Wrap brackets around current word (if cursor is on a word), or text selection, else just insert a pair and place cursor in between. Behavior is same and predictable anywhere. (not dependent on syntax table.) Convenient shortcuts keys on home row, or any key you chose. Inserts 10 other Unicode brackets and quotes.

Bracket Pair Insertion Commands

Put this in your Emacs Init File:

#+begin_src emacs-lisp :results silent
  (defun xah-insert-bracket-pair (LBracket RBracket &optional WrapMethod)
    "Insert brackets around selection, word, at point, and maybe move cursor in between.

   LBracket and RBracket are strings. WrapMethod must be either `line' or `block'. `block' means between empty lines.

  • if there is a region, add brackets around region.
  • If WrapMethod is `line', wrap around line.
  • If WrapMethod is `block', wrap around block.
  • if cursor is at beginning of line and its not empty line and contain at least 1 space, wrap around the line.
  • If cursor is at end of a word or buffer, one of the following will happen:
   xyz▮ → xyz(▮)
   xyz▮ → (xyz▮)       if in one of the lisp modes.
  • wrap brackets around word if any. e.g. xy▮z → (xyz▮). Or just (▮)

  URL `http://xahlee.info/emacs/emacs/elisp_insert_brackets_by_pair.html'
  Version: 2017-01-17 2021-08-12"
    (if (region-active-p)
        (progn
          (let ( ($p1 (region-beginning)) ($p2 (region-end)))
            (goto-char $p2) (insert RBracket)
            (goto-char $p1) (insert LBracket)
            (goto-char (+ $p2 2))))
      (let ($p1 $p2)
        (cond
         ((eq WrapMethod 'line)
          (setq $p1 (line-beginning-position) $p2 (line-end-position))
          (goto-char $p2)
          (insert RBracket)
          (goto-char $p1)
          (insert LBracket)
          (goto-char (+ $p2 (length LBracket))))
         ((eq WrapMethod 'block)
          (save-excursion
            (let (($bds (xah-get-bounds-of-block-or-region))) (setq $p1 (car $bds) $p2 (cdr $bds)))
            (goto-char $p2)
            (insert RBracket)
            (goto-char $p1)
            (insert LBracket)
            (goto-char (+ $p2 (length LBracket)))))
         ( ;  do line. line must contain space
          (and
           (eq (point) (line-beginning-position))
           ;; (string-match " " (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
           (not (eq (line-beginning-position) (line-end-position))))
          (insert LBracket )
          (end-of-line)
          (insert  RBracket))
         ((and
           (or ; cursor is at end of word or buffer. i.e. xyz▮
            (looking-at "[^-_[:alnum:]]")
            (eq (point) (point-max)))
           (not (or
                 (string-equal major-mode "xah-elisp-mode")
                 (string-equal major-mode "emacs-lisp-mode")
                 (string-equal major-mode "lisp-mode")
                 (string-equal major-mode "lisp-interaction-mode")
                 (string-equal major-mode "common-lisp-mode")
                 (string-equal major-mode "clojure-mode")
                 (string-equal major-mode "xah-clojure-mode")
                 (string-equal major-mode "scheme-mode"))))
          (progn
            (setq $p1 (point) $p2 (point))
            (insert LBracket RBracket)
            (search-backward RBracket )))
         (t (progn
              ;; wrap around “word”. basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations. Also want chinese chars
              ;; 我有一帘幽梦，不知与谁能共。多少秘密在其中，欲诉无人能懂。
              (skip-chars-backward "-_[:alnum:]")
              (setq $p1 (point))
              (skip-chars-forward "-_[:alnum:]")
              (setq $p2 (point))
              (goto-char $p2)
              (insert RBracket)
              (goto-char $p1)
              (insert LBracket)
              (goto-char (+ $p2 (length LBracket)))))))))

#+end_src

require: Emacs: xah-get-thing.el

Now we define the commands:

#+begin_src emacs-lisp :results silent
  (defun xah-insert-paren () (interactive) (xah-insert-bracket-pair "(" ")") )
  (defun xah-insert-square-bracket () (interactive) (xah-insert-bracket-pair "[" "]") )
  (defun xah-insert-brace () (interactive) (xah-insert-bracket-pair "{" "}") )

  (defun xah-insert-markdown-quote () (interactive) (xah-insert-bracket-pair "`" "`") )
  (defun xah-insert-markdown-triple-quote () (interactive) (xah-insert-bracket-pair "```\n" "\n```"))

  (defun xah-insert-double-curly-quote () (interactive) (xah-insert-bracket-pair "“" "”") )
  (defun xah-insert-curly-single-quote () (interactive) (xah-insert-bracket-pair "‘" "’") )
  (defun xah-insert-single-angle-quote () (interactive) (xah-insert-bracket-pair "‹" "›") )
  (defun xah-insert-double-angle-quote () (interactive) (xah-insert-bracket-pair "«" "»") )
  (defun xah-insert-ascii-double-quote () (interactive) (xah-insert-bracket-pair "\"" "\"") )
  (defun xah-insert-ascii-single-quote () (interactive) (xah-insert-bracket-pair "'" "'") )
  (defun xah-insert-emacs-quote () (interactive) (xah-insert-bracket-pair "`" "'") )
  (defun xah-insert-corner-bracket () (interactive) (xah-insert-bracket-pair "「" "」" ) )
  (defun xah-insert-white-corner-bracket () (interactive) (xah-insert-bracket-pair "『" "』") )
  (defun xah-insert-angle-bracket () (interactive) (xah-insert-bracket-pair "〈" "〉") )
  (defun xah-insert-double-angle-bracket () (interactive) (xah-insert-bracket-pair "《" "》") )
  (defun xah-insert-white-lenticular-bracket () (interactive) (xah-insert-bracket-pair "〖" "〗") )
  (defun xah-insert-black-lenticular-bracket () (interactive) (xah-insert-bracket-pair "【" "】") )
  (defun xah-insert-tortoise-shell-bracket () (interactive) (xah-insert-bracket-pair "〔" "〕" ) )

  (global-set-key (kbd "<f8> 7") 'xah-insert-brace) ; {}

  (global-set-key (kbd "<f8> 8") 'xah-insert-paren) ; ()

  (global-set-key (kbd "<f8> 9") 'xah-insert-square-bracket) ; []

#+end_src

[see Emacs: How to Define Keys]
